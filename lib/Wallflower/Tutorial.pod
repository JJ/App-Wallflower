
=head1 NAME

Wallflower::Tutorial - Turn your Plack app into a static site

=head1 SYNOPSIS

    # do cool stuff using Plack-aware frameworks,
    # to generate static web sites

=head1 WRITING A PSGI APPLICATION FOR WALLFLOWER

=head2 All URL should have an extension

A PSGI/Plack is able to define the C<Content-Type> that will be sent
for any URL content.

On the other hand, static file servers use the extension to decide what
C<Content-Type> to send for a given file. When unable to decide what
the file content is, servers usually send C<application/octet-stream>
as the C<Content-Type>.

Since the goal of a L<Wallflower> application is to generate a static
website, it is recommended that I<all URL should have an extensions>.


=head2 Hide the non-static elements in a specific Plack environment

Because the web site can be written with any modern web framework, it's
also very easy to have URL that reply to C<POST> requests. Obviously,
these pages can not be saved on the static destination.

It's very easy to use the Plack environment to decide which pages
to enable. By default, L<plackup> sets the Plack environment to
C<development>, while L<wallflower> sets it to C<deployment>.

It's therefore possible to hide the dynamic parts of the application
in the C<development> environment, while only the static elements are
reachable from the C<deployment> environment.


=head1 URI SEMANTICS COMPARED TO DIRECTORY SEMANTICS

A Plack application deals with URI. Nothing prevents the application
to consider that F</thunk> and F</thunk/> are different, and to return
different content bodies for each of them.

When dealing with a filesystem, however, if F<thunk> is a directory,
then it is semantically equivalent to F<thunk/>. And it is impossible
to have both a file and a directory with the same name inside the same
parent directory.

When dealing with a static site, the server maps the URI to the
filesystem. If F<thunk> is a directory, the server usually redirects the
client to F<thunk/>. Then the default file is picked for the content,
traditionally F<thunk/index.html>.

Because L<Wallflower> does not know the conventions used by the Plack
application it calls, it cannot decide if F</thunk> should be understood
as a "file" or as a "directory" when generating the file name that will
receive the content for that URI.

If your application treats F</thunk> and F</thunk/> as identical, you
should I<always> request F</thunk/> with L<wallflower>, otherwise you
might end up with the F<thunk> file already existing when it tries to
create files under the F<thunk/> directory, or vice-versa.

See also the section L</"All URL should have an extension">, for reasons
to avoid extensionless URL.


=head1 AUTHOR

Philippe Bruhat (BooK), C<< <book@cpan.org> >>

=head1 COPYRIGHT

Copyright 2012 Philippe Bruhat (BooK), all rights reserved.

=head1 LICENSE

This documentation is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

